//https://github.com/boyu918/JavaGuide/blob/master/docs/database/%E4%B8%80%E5%8D%83%E8%A1%8CMySQL%E5%91%BD%E4%BB%A4.md
1.系统搜索
  1.1 show engines; 查询所有引擎
  1.2 show databases; 查询所有数据库
  1.3 use :database;  进入使用database这个数据库
  1.4 show tables; 查看当前数据库的所有表
2.数据库连接
  2.1 mysql -h :地址 -u :用户名 -p :端口 连接这个数据库
  2.2 show processlist; 显示有哪些线程正在运行
  2.3 show variables; 显示当前系统有哪些系统变量
3.数据库操作
  3.1 select database(); 显示当前数据库连接名字
  3.2 select now(); 显示当前时间
  3.3 select version(); 显示当前数据库版本
  3.4 create databse if not exists :数据库名字  数据库选项; 创建数据库
      数据库选项：
          CHARACTER SET charset_name
          COLLATE collation_name
  3.5 ALTER DATABASE 库名 选项信息
  3.6 DROP DATABASE[ IF EXISTS] 数据库名
4.表的操作
  4.1 创建表
        CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]
          每个字段必须有数据类型
          最后一个字段后不能有逗号
          TEMPORARY 临时表，会话结束时表自动消失
          对于字段的定义：
              字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']
          表选项
             -- 字符集
                 CHARSET = charset_name
                 如果表没有设定，则使用数据库字符集
             -- 存储引擎
                 ENGINE = engine_name
                 表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同
                 常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive
                 不同的引擎在保存表的结构和数据时采用不同的方式
                 MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引
                 InnoDB表文件含义：.frm表定义，表空间数据和日志文件
                 SHOW ENGINES -- 显示存储引擎的状态信息
                 SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息
             -- 自增起始数
                AUTO_INCREMENT = 行数
             -- 数据文件目录
                 DATA DIRECTORY = '目录'
             -- 索引文件目录
                 INDEX DIRECTORY = '目录'
             -- 表注释
                 COMMENT = 'string'
             -- 分区选项
                 PARTITION BY ... (详细见手册)
   4.2-- 查看所有表
          SHOW TABLES[ LIKE 'pattern']
          SHOW TABLES FROM  库名
   4.3-- 查看表结构
          SHOW CREATE TABLE 表名 （信息更详细）
          DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']
          SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']
   4.4-- 修改表
          -- 修改表本身的选项
              ALTER TABLE 表名 表的选项
              eg: ALTER TABLE 表名 ENGINE=MYISAM;
          -- 对表进行重命名
              RENAME TABLE 原表名 TO 新表名
              RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）
              -- RENAME可以交换两个表名
          -- 修改表的字段机构（13.1.2. ALTER TABLE语法）
              ALTER TABLE 表名 操作名
              -- 操作名
                  ADD[ COLUMN] 字段定义       -- 增加字段
                      AFTER 字段名          -- 表示增加在该字段名后面
                      FIRST               -- 表示增加在第一个
                  ADD PRIMARY KEY(字段名)   -- 创建主键
                  ADD UNIQUE [索引名] (字段名)-- 创建唯一索引
                  ADD INDEX [索引名] (字段名) -- 创建普通索引
                  DROP[ COLUMN] 字段名      -- 删除字段
                  MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)
                  CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改
                  DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)
                  DROP INDEX 索引名 -- 删除索引
                  DROP FOREIGN KEY 外键    -- 删除外键
   4.5    删除表
          DROP TABLE[ IF EXISTS] 表名 ...
   4.6    清空表数据
          TRUNCATE [TABLE] 表名
   4.7    复制表结构
          CREATE TABLE 表名 LIKE 要复制的表名
   4.8    复制表结构和数据
          CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名
   4.9    检查表是否有错误
          CHECK TABLE tbl_name [, tbl_name] ... [option] ...
   4.10   优化表
          OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...
   4.11   修复表
          REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]
   4.12   分析表
          ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...
5.数据类型
  5.1数值类型
   5.1.1 -- 整型 ----------
             类型         字节     范围（有符号位）
             tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255
             smallint    2字节    -32768 ~ 32767
             mediumint   3字节    -8388608 ~ 8388607
             int         4字节
             bigint      8字节
             int(M)  M表示总位数
             - 默认存在符号位，unsigned 属性修改
             - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改
                 例：int(5)   插入一个数'123'，补填后为'00123'
             - 在满足要求的情况下，越小越好。
             - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。
   5.1.2 -- 浮点型 ----------
             类型             字节     范围
             float(单精度)     4字节
             double(双精度)    8字节
             浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。
                 不同于整型，前后均会补填0.
             定义浮点型时，需指定总位数和小数位数。
                 float(M, D)     double(M, D)
                 M表示总位数，D表示小数位数。
                 M和D的大小会决定浮点数的范围。不同于整型的固定范围。
                 M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。
                 支持科学计数法表示。
                 浮点数表示近似值。
    5.1.3 -- 定点数 ----------
              decimal -- 可变长度
              decimal(M, D)   M也表示总位数，D表示小数位数。
              保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。
              将浮点数转换为字符串来保存，每9位数字保存为4个字节。
   5.2字符串类型
    5.2.1-- char, varchar ----------
             char    定长字符串，速度快，但浪费空间
             varchar 变长字符串，速度慢，但节省空间
             M表示能存储的最大长度，此长度是字符数，非字节数。
             不同的编码，所占用的空间不同。
             char,最多255个字符，与编码无关。
             varchar,最多65535字符，与编码有关。
             一条有效记录最大不能超过65535个字节。
                 utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符
             varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。
             varchar 的最大有效长度由最大行大小和使用的字符集确定。
             最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是65535-1-2=65532字节。
             例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3
    5.2.2-- blob, text ----------
             blob 二进制字符串（字节字符串）
                 tinyblob, blob, mediumblob, longblob
             text 非二进制字符串（字符字符串）
                 tinytext, text, mediumtext, longtext
             text 在定义时，不需要定义长度，也不会计算总长度。
             text 类型在定义时，不可给default值
    5.2.3-- binary, varbinary ----------
             类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。
             char, varchar, text 对应 binary, varbinary, blob.

   5.3 日期时间类型
       一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。
       datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59
       date        3字节    日期         1000-01-01 到 9999-12-31
       timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07
       time        3字节    时间         -838:59:59 到 838:59:59
       year        1字节    年份         1901 - 2155
   5.4 枚举和集合
      -- 枚举(enum) ----------
      enum(val1, val2, val3...)
          在已知的值中进行单选。最大数量为65535.
          枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。
          表现为字符串类型，存储却是整型。
          NULL值的索引是NULL。
          空字符串错误值的索引值是0。
      -- 集合（set） ----------
      set(val1, val2, val3...)
          create table tab ( gender set('男', '女', '无') );
          insert into tab values ('男, 女');
          最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。
          当创建表时，SET成员值的尾部空格将自动被删除。
6.列属性
  6.1  PRIMARY 主键
    - 能唯一标识记录的字段，可以作为主键。
    - 一个表只能有一个主键。
    - 主键具有唯一性。
    - 声明字段时，用 primary key 标识。
        也可以在字段列表之后声明
            例：create table tab ( id int, stu varchar(10), primary key (id));
    - 主键字段的值不能为null。
    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。
        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));
  6.2 UNIQUE 唯一索引（唯一约束）
      使得某字段的值也不能重复。
  6.3 NULL 约束
      null不是数据类型，是列的一个属性。
      表示当前列是否可以为null，表示什么都没有。
      null, 允许为空。默认。
      not null, 不允许为空。
      insert into tab values (null, 'val');
          -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null
  6.4 DEFAULT 默认值属性
      当前字段的默认值。
      insert into tab values (default, 'val');    -- 此时表示强制使用默认值。
      create table tab ( add_time timestamp default current_timestamp );
          -- 表示将当前时间的时间戳设为默认值。
          current_date, current_time
  6.5 AUTO_INCREMENT 自动增长约束
      自动增长必须为索引（主键或unique）
      只能存在一个字段为自动增长。
      默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;
  6.6 COMMENT 注释
      例：create table tab ( id int ) comment '注释内容';
  6.7 FOREIGN KEY 外键约束
      用于限制主表与从表数据完整性。
      alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);
          -- 将表t1的t1_id外键关联到表t2的id字段。
          -- 每个外键都有一个名字，可以通过 constraint 指定
      存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。
      作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。
      MySQL中，可以对InnoDB引擎使用外键约束：
      语法：
      foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]
      此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。
      可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。
      如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：
      1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。
      2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。
      3. restrict，拒绝父表删除和更新。
      注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。
7.建表规范
  -- Normal Format, NF
      - 每个表保存一个实体信息
      - 每个具有一个ID字段作为主键
      - ID主键 + 原子表
  -- 1NF, 第一范式
      字段不能再分，就满足第一范式。
  -- 2NF, 第二范式
      满足第一范式的前提下，不能出现部分依赖。
      消除复合主键就可以避免部分依赖。增加单列关键字。
  -- 3NF, 第三范式
      满足第二范式的前提下，不能出现传递依赖。
      某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。
      将一个实体信息的数据放在一个表内实现。
8.删除表，清空表
    TRUNCATE [TABLE] tbl_name
    清空数据
    删除重建表
    区别：
    1，truncate 是删除表再创建，delete 是逐条删除
    2，truncate 重置auto_increment的值。而delete不会
    3，truncate 不知道删除了几条，而delete知道。
    4，当被用于带分区的表时，truncate 会保留分区
