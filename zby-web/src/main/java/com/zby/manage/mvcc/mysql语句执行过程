mysql 语句执行过程
1.mysql 基础框架
  1.1 server端 这个所有引擎都使用的部分,除了存储引擎之后的所有都在这个地方做，比如视图、存储过程、函数、触发器等，以及进行日志归档的binlog
    1.1.1 连接器：作为身份校验和数据权限
    1.1.2 缓存：查询语句会先查询缓存（mysql8.0之后删除）
    1.1.3 分析器：分析语句是否正确，符合mysql的sql语句标准
    1.1.4 优化器：进行sql语句优化，选择优化器认为最好的执行方式进行执行
    1.1.5 执行器：执行语句，从存储引擎处返回数据
  1.2 存储引擎，主要进行数据的存储和获取，由插件式的存储引擎来使用，比如myISAM/InnoDB等，在innoDB中有redolog
    1.2.1 存储引擎：myISAM /InnoDB 等 存储引擎
    1.2.2 数据：执行返回结果
2.关于binlog 和 redolog
  binlog是归档日志，而redolog是重做日志，在修改阶段是通过二阶段提交，首先在redolog中进行日志更新并把这条记录状态改为prepare并通知binlog进行归档日志录入，
  binlog进行日志添加并通知redolog已经添加到binlog中，再有binlog日志将日志修改为commit进行数据提交。
  1.为了保证数据恢复的一致性，
  2.redolog文件写到头之后会再次从头写，会覆盖之前的日志，而binlog作为归档日志，则不会，而是写满一个日志文件之后再进行编写
  3.redo log 他记录的是数据库当前值，实际上是防止系统崩溃的，当系统崩溃重启时，可以通过redo log 来恢复崩溃之前的页面。
  4.binlog是做备份的，binlog 中记录的是sql语句，或行的内容。当想恢复到之前几小时，几天或者几个月的数据时，就需要依次提取当时的binlog，按照时间顺序重放的到需要的时刻。
  区别
  1.redo log 的大小是固定的。	binlog 可通过配置参数 max_binlog_size 设置每个 binlog 文件的大小
  2.redo log 是 InnoDB 引擎层实现的，并不是所有引擎都有。	binlog 是 Server 层实现的，所有引擎都可以使用 binlog 日志
  3.redo log 采用循环写的方式记录，当写到结尾时，会回到开头循环写日志。	binlog通过追加的方式记录，当文件大小大于给定值后，后续的日志会记录到新的文件上
  4.redo log 适用于崩溃恢复(crash-safe)	binlog 适用于主从复制和数据恢复